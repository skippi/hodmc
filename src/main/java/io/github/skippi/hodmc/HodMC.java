/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.github.skippi.hodmc;

import net.minecraft.server.v1_16_R3.EntityHorseZombie;
import net.minecraft.server.v1_16_R3.EntityLiving;
import net.minecraft.server.v1_16_R3.EntityTypes;
import org.bukkit.*;
import org.bukkit.craftbukkit.v1_16_R3.CraftWorld;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitScheduler;
import org.bukkit.scoreboard.DisplaySlot;
import org.bukkit.scoreboard.Objective;
import org.bukkit.scoreboard.Score;
import org.bukkit.scoreboard.Scoreboard;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

public class HodMC extends JavaPlugin {
    private Runnable ticker = this::tickDay;
    private List<Wave> waves = Arrays.asList(Wave.builder().withUnitGroup("minecraft:zombie_horse", 5).build());
    private int roundIndex = 0;
    private long roundTime = 0;
    private List<EntityLiving> roundEntities = new ArrayList<>();

    @Override
    public void onEnable() {
        World world = getServer().getWorld("world");
        world.setFullTime(0);
        BukkitScheduler scheduler = getServer().getScheduler();
        scheduler.scheduleSyncRepeatingTask(this, () -> ticker.run(), 0, 1);
    }

    private Scoreboard makeDayScoreboard() {
        World world = getServer().getWorld("world");
        Scoreboard board = Bukkit.getScoreboardManager().getNewScoreboard();
        Objective obj = board.registerNewObjective("game", "dummy", "HoD Survival");
        obj.setDisplaySlot(DisplaySlot.SIDEBAR);
        SimpleDateFormat format = new SimpleDateFormat("mm:ss");
        obj.getScore("-------------").setScore(3);
        obj.getScore("Phase: " + ChatColor.AQUA + "Day").setScore(2);
        obj.getScore("Time: " + ChatColor.AQUA + format.format(new Date((long) (Math.ceil((13000 - world.getFullTime()) / 140.0) * 1000)))).setScore(1);
        return board;
    }

    private Scoreboard makeNightScoreboard() {
        Scoreboard board = Bukkit.getScoreboardManager().getNewScoreboard();
        Objective obj = board.registerNewObjective("game", "dummy", "HoD Survival");
        obj.setDisplaySlot(DisplaySlot.SIDEBAR);
        SimpleDateFormat format = new SimpleDateFormat("mm:ss");
        obj.getScore("-------------").setScore(3);
        obj.getScore("Phase: " + ChatColor.AQUA + "Night").setScore(2);
        obj.getScore("Time: " + ChatColor.AQUA + format.format(new Date(roundTime / 20 * 1000))).setScore(1);
        return board;
    }

    private void tickDay() {
        if (isVictory()) {
            return;
        }
        Scoreboard board = makeDayScoreboard();
        Bukkit.getOnlinePlayers().forEach(p -> p.setScoreboard(board));
        World world = getServer().getWorld("world");
        world.getPlayers().forEach(this::addDaytimeEffects);
        world.setFullTime(world.getFullTime() + 6);
        if (world.getFullTime() >= 13000) {
            world.getPlayers().forEach(this::removeDaytimeEffects);
            ticker = this::tickDayNight;
        }
    }

    private void addDaytimeEffects(Player player) {
        player.setWalkSpeed(0.5f);
    }

    private void removeDaytimeEffects(Player player) {
        player.setWalkSpeed(0.2f);
    }

    private void tickDayNight() {
        World world = getServer().getWorld("world");
        if (world.getFullTime() < 18000) {
            world.setFullTime(world.getFullTime() + 100);
            return;
        }
        Location spawnLocation = world.getSpawnLocation();
        if (!world.getPlayers().isEmpty()) {
            spawnLocation = world.getPlayers().get(0).getLocation();
        }
        roundTime = getCurrentWave().getTimeLimit();
        world.setFullTime(18000);
        world.setGameRule(GameRule.DO_DAYLIGHT_CYCLE, false);
        roundEntities.clear();
        for (String id : getCurrentWave().getUnits()) {
            roundEntities.add(genUnit(id, spawnLocation));
        }
        ticker = this::tickNight;
    }

    private void tickNightDay() {
        World world = getServer().getWorld("world");
        if (world.getFullTime() < 24000 && world.getFullTime() >= 13000) {
            world.setFullTime(world.getFullTime() + 200);
            return;
        }
        world.setFullTime(0);
        world.setGameRule(GameRule.DO_DAYLIGHT_CYCLE, true);
        ticker = this::tickDay;
    }

    private EntityLiving genUnit(String id, Location loc) {
        CraftWorld world = (CraftWorld) loc.getWorld();
        EntityLiving entity = new EntityHorseZombie(EntityTypes.ZOMBIE_HORSE, world.getHandle());
        entity.setPosition(loc.getX(), loc.getY(), loc.getZ());
        world.getHandle().addEntity(entity);
        return entity;
    }

    private void tickNight() {
        World world = getServer().getWorld("world");
        Scoreboard board = makeNightScoreboard();
        Bukkit.getOnlinePlayers().forEach(p -> p.setScoreboard(board));
        if (roundTime <= 0) {
            for (Player player : world.getPlayers()) {
                player.damage(1);
            }
        }
        if (roundEntities.stream().allMatch(e -> !e.isAlive())) {
            roundIndex++;
            roundTime = 0;
            roundEntities.clear();
            ticker = this::tickNightDay;
        }
        roundTime = Math.max(0, roundTime - 1);
    }

    private Wave getCurrentWave() {
       return waves.get(roundIndex);
    }

    private boolean isVictory() {
        return roundIndex >= waves.size();
    }
}
